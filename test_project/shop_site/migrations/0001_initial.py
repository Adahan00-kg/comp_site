# Generated by Django 5.1.1 on 2024-10-09 10:38

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Body_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body_category_name', models.CharField(max_length=15, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Cooling_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cooling_category_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='DVD_drive_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dvd_drive_category_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Hard_drive_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drive_category_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Headset_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('the_headset_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Keyboard_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyboard_category_name', models.CharField(max_length=25, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Manitor_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manitor_category_name', models.CharField(max_length=25, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Mouse_catergory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mouse_category_name', models.CharField(max_length=25, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Operating_system_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operating_system_name', models.CharField(max_length=25, unique=True, verbose_name='Операционная система')),
            ],
        ),
        migrations.CreateModel(
            name='Power_unit_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('power_unit_category_name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Processor_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('processor_category_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Random_access_memory_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_memory_category_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sound_card_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sound_category_name', models.CharField(max_length=25, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SSD_drive_1_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ssd_drive_1_category_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SSD_drive_2_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ssd_2_category_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='The_motherboard_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('motherboard_category_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Video_card_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('video_card_category_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Wi_Fi_category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wi_fi_category_name', models.CharField(max_length=25, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Body_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form_factor', models.CharField(max_length=25)),
                ('name_element_body', models.CharField(max_length=25)),
                ('body_price', models.IntegerField(default=0)),
                ('type_size', models.CharField(blank=True, max_length=25, null=True, verbose_name='Типопазмер')),
                ('length_video_card', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Максимальная длинна видеокарты')),
                ('dimensions', models.CharField(blank=True, max_length=25, null=True, verbose_name='Габариты(ШхВхГ)')),
                ('connectors_panel', models.CharField(blank=True, max_length=100, null=True, verbose_name='Разъемы на лицевой панели')),
                ('liquid_cooling', models.BooleanField(blank=True, default=False, null=True, verbose_name='возможность устоновить систему жидкостного охлождения')),
                ('processor_cooler', models.CharField(blank=True, max_length=100, null=True, verbose_name='Максимальная высота процессорного кулера')),
                ('air_filter', models.BooleanField(blank=True, default=False, null=True, verbose_name='Съемный воздушный фильтр')),
                ('body_element_image', models.FileField(blank=True, null=True, upload_to='body_element_image')),
                ('body_img', models.ImageField(upload_to='body_img')),
                ('middle_body_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='middle_body_conaction', to='shop_site.body_category')),
            ],
        ),
        migrations.CreateModel(
            name='Cooling_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cooling_element_name', models.CharField(max_length=100, verbose_name='Name')),
                ('radiator_material', models.CharField(blank=True, max_length=100, null=True, verbose_name='Материал радиатора')),
                ('cooler_height', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Высота кулера')),
                ('number_of_heat_pipes', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Количество тепловых трубок')),
                ('rotation_speed', models.CharField(blank=True, max_length=100, null=True, verbose_name='Скорость вращения')),
                ('air_flow', models.CharField(blank=True, max_length=100, null=True, verbose_name='Воздушный поток')),
                ('noise_level', models.DecimalField(blank=True, decimal_places=2, max_digits=500, null=True, verbose_name='Уровень шума')),
                ('type_of_bearing', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип подшипника')),
                ('the_backlight', models.CharField(blank=True, max_length=100, null=True, verbose_name='Подсветка')),
                ('uptime', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Время безотказной работы')),
                ('weight', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Вес')),
                ('water_block_material', models.CharField(blank=True, max_length=100, null=True, verbose_name='Материал водоблока')),
                ('price', models.PositiveSmallIntegerField(default=0)),
                ('cooling_image', models.ImageField(blank=True, null=True, upload_to='Cooling_images/')),
                ('middle_cooling_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='middle_cooling_conaction', to='shop_site.cooling_category')),
            ],
        ),
        migrations.CreateModel(
            name='DVD_drive_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dvd_element_name', models.CharField(max_length=100)),
                ('type_of_drive', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип привода')),
                ('connection_interface', models.CharField(blank=True, max_length=100, null=True, verbose_name='Интерфейс подключения')),
                ('price', models.PositiveSmallIntegerField(default=0)),
                ('images', models.ImageField(blank=True, null=True, upload_to='dvd_element_images')),
                ('middle_dvd_drive_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='middle_dvd_drive_conaction', to='shop_site.dvd_drive_category')),
            ],
        ),
        migrations.CreateModel(
            name='Hard_drive_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drive_element_name', models.CharField(max_length=100)),
                ('volume', models.CharField(blank=True, max_length=100, null=True, verbose_name='Объем')),
                ('type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип')),
                ('recording_speed_reading_speed', models.CharField(blank=True, max_length=100, null=True, verbose_name='Скорость записи/Скорость чтения')),
                ('the_amount_of_buffer_memory', models.CharField(blank=True, max_length=100, null=True, verbose_name='Объем буферной памяти')),
                ('connection', models.CharField(blank=True, max_length=100, null=True, verbose_name='Подключение')),
                ('price', models.PositiveSmallIntegerField(default=0)),
                ('drive_element_images', models.ImageField(blank=True, null=True, upload_to='drive_element_images/')),
                ('middle_hard_drive_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drive_element', to='shop_site.hard_drive_category')),
            ],
        ),
        migrations.CreateModel(
            name='Headset_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('the_headset_element_name', models.CharField(max_length=100)),
                ('manufacturer', models.CharField(blank=True, max_length=100, null=True, verbose_name='Производитель')),
                ('type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип')),
                ('headphone_design', models.CharField(blank=True, max_length=100, null=True, verbose_name='Конструкция наушников')),
                ('connection_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип подключения')),
                ('type_of_acoustic_design', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип акустического оформления')),
                ('mounting_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип крепления')),
                ('cable_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип кабеля')),
                ('folding_design', models.BooleanField(blank=True, default=False, null=True, verbose_name='Складная конструкция')),
                ('connecting_the_cable', models.CharField(blank=True, max_length=100, null=True, verbose_name='Подключение кабеля')),
                ('interface_connection_connector', models.CharField(blank=True, max_length=100, null=True, verbose_name='Интерфейс/разъём подключения')),
                ('type_of_batteries', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип элементов питания')),
                ('battery_life', models.CharField(blank=True, max_length=100, null=True, verbose_name='Продолжительность работы от аккумуляторов')),
                ('type_of_wireless_connection', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип беспроводной связи')),
                ('range_of_action', models.CharField(blank=True, max_length=100, null=True, verbose_name='Радиус действия')),
                ('bluetooth_Version', models.CharField(blank=True, max_length=100, null=True, verbose_name='Версия Bluetooth')),
                ('case_case_included', models.BooleanField(blank=True, default=False, null=True, verbose_name='Чехол/футляр в комплекте')),
                ('volume_control', models.BooleanField(default=False, verbose_name='Регулятор громкости')),
                ('colour', models.CharField(blank=True, max_length=100, null=True, verbose_name='Цвет')),
                ('weight', models.CharField(blank=True, max_length=100, null=True, verbose_name='Вес')),
                ('guarantee', models.CharField(blank=True, max_length=100, null=True, verbose_name='Гарантия')),
                ('headset_price', models.PositiveIntegerField(verbose_name='цена')),
                ('headset_img', models.ImageField(upload_to='headset_img/')),
                ('middle_the_headset_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='middle_the_headset_conaction', to='shop_site.headset_category')),
            ],
        ),
        migrations.CreateModel(
            name='Keyboard_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyboard_element_name', models.CharField(max_length=25, unique=True)),
                ('keyboard_price', models.IntegerField(default=0)),
                ('keyboard_img', models.ImageField(blank=True, null=True, upload_to='keyboard_img')),
                ('connection_interface_keyboard', models.CharField(blank=True, max_length=25, null=True, verbose_name='Интерфейс подключения')),
                ('digital_block', models.BooleanField(blank=True, default=True, null=True, verbose_name='Цифровой блок')),
                ('number_keys', models.SmallIntegerField(blank=True, default=0, null=True, verbose_name='Количество клавиш')),
                ('middle_keyboard_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='middle_keyboard_conaction', to='shop_site.keyboard_category', verbose_name='категория')),
            ],
        ),
        migrations.CreateModel(
            name='Manitor_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manitor_element_name', models.CharField(max_length=25, unique=True)),
                ('manitor_price', models.IntegerField(default=0)),
                ('manitor_img', models.ImageField(blank=True, null=True, upload_to='manitor_img')),
                ('diagonal', models.CharField(blank=True, max_length=25, null=True, verbose_name='Диагональ')),
                ('brightness', models.CharField(blank=True, max_length=25, null=True, verbose_name='Яркость')),
                ('contrast_ratio', models.CharField(blank=True, max_length=25, null=True, verbose_name='Контрастность')),
                ('response_time', models.CharField(blank=True, max_length=25, null=True, verbose_name='Время отклика')),
                ('maximum_colors', models.CharField(blank=True, max_length=25, null=True, verbose_name='Максимальное количество цветов')),
                ('update_frequency', models.IntegerField(blank=True, default=0, null=True, verbose_name='Частота обновления')),
                ('height_adjustment', models.BooleanField(blank=True, default=False, null=True, verbose_name='Регулировка по высоте')),
                ('middle_manitor_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='middle_manitor_conaction', to='shop_site.manitor_category')),
            ],
        ),
        migrations.CreateModel(
            name='Mouse_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mouse_element_name', models.CharField(max_length=25, unique=True)),
                ('mouse_type', models.CharField(blank=True, max_length=25, null=True, verbose_name='тип')),
                ('mouse_price', models.PositiveIntegerField(default=0, verbose_name='цена')),
                ('mouse_img', models.ImageField(blank=True, null=True, upload_to='mouse_img')),
                ('connection_interface', models.CharField(blank=True, max_length=25, null=True)),
                ('scroll_wheel', models.BooleanField(blank=True, default=True, null=True, verbose_name='Колесо прокрутки')),
                ('number_keys', models.SmallIntegerField(blank=True, default=1, null=True, verbose_name='Количество клавиш')),
                ('polling_frequency', models.IntegerField(blank=True, default=0, null=True, verbose_name='Частота опроса')),
                ('sensor_opt_resolution', models.IntegerField(blank=True, default=0, null=True, verbose_name='Разрешение оптического сенсора')),
                ('weight', models.CharField(blank=True, max_length=10, null=True, verbose_name='Вес')),
                ('mouse_design', models.CharField(blank=True, max_length=25, null=True)),
                ('sensor_resolution', models.CharField(blank=True, max_length=25, null=True, verbose_name='Разрешение сенсора')),
                ('middle_mouse_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='middle_mouse_conaction', to='shop_site.mouse_catergory')),
            ],
        ),
        migrations.CreateModel(
            name='Operating_system_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operating_element_name', models.CharField(max_length=25, unique=True)),
                ('operating_img', models.ImageField(blank=True, null=True, upload_to='operating_img')),
                ('operating_price', models.PositiveIntegerField(default=0, verbose_name='цена')),
                ('middle_operation_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='middle_operation_conaction', to='shop_site.operating_system_category')),
            ],
        ),
        migrations.CreateModel(
            name='Power_unit_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('power_unit_element_name', models.CharField(max_length=50, unique=True)),
                ('power_unit_price', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('power', models.IntegerField(blank=True, default=0, null=True, verbose_name='Mощность')),
                ('standard_power', models.CharField(blank=True, max_length=25, null=True, verbose_name='cтандарт')),
                ('power_img', models.ImageField(blank=True, null=True, upload_to='power_img')),
                ('middle_power_unit_conaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='middle_power_unit_conaction', to='shop_site.power_unit_category')),
            ],
        ),
        migrations.CreateModel(
            name='Processor_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('processor_element_name', models.CharField(max_length=100, verbose_name='Name')),
                ('soket', models.CharField(blank=True, max_length=100, null=True, verbose_name='Сокет')),
                ('l3_cache_size', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Объем кэша L3')),
                ('number_of_cores', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Количество ядер')),
                ('processor_frequency', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Частота процессора')),
                ('technical_process', models.CharField(blank=True, max_length=100, null=True, verbose_name='Техпроцесс')),
                ('the_core', models.CharField(blank=True, max_length=100, null=True, verbose_name='Ядро')),
                ('maximum_frequency_with_turbo_boost', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Максимальная частота с Turbo Boost')),
                ('price', models.PositiveSmallIntegerField(default=0)),
                ('processor_image', models.ImageField(blank=True, null=True, upload_to='Processor_images/')),
                ('middle_processor_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='middle_processor_conaction', to='shop_site.processor_category')),
            ],
        ),
        migrations.CreateModel(
            name='Random_access_memory_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_memory_element_name', models.CharField(max_length=100)),
                ('memory_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип памяти')),
                ('the_form_factor', models.CharField(blank=True, max_length=100, null=True, verbose_name='Форм-фактор')),
                ('clock_frequency', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тактовая частота')),
                ('bandwidth', models.CharField(max_length=100, verbose_name='Пропускная')),
                ('supply_voltage', models.DecimalField(decimal_places=2, max_digits=50, verbose_name='Напряжение питания')),
                ('volume', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Объем')),
                ('radiator', models.BooleanField(default=False, verbose_name='Радиатор')),
                ('xmp_support', models.BooleanField(default=False, verbose_name='Поддержка XMP')),
                ('price', models.PositiveSmallIntegerField(default=0)),
                ('memory_element_images', models.ImageField(blank=True, null=True, upload_to='memory_element_images')),
                ('middle_memory_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='middle_memory_conaction', to='shop_site.random_access_memory_category')),
            ],
        ),
        migrations.CreateModel(
            name='Sound_card_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sound_name', models.CharField(max_length=25, unique=True)),
                ('sound_price', models.PositiveIntegerField(default=0, verbose_name='цена')),
                ('sound_type', models.CharField(blank=True, max_length=25, null=True, verbose_name='Тип')),
                ('sound_img', models.ImageField(blank=True, null=True, upload_to='sound_img')),
                ('connection_type', models.CharField(blank=True, max_length=25, null=True, verbose_name='Тип подключения')),
                ('multi_audio', models.BooleanField(blank=True, default=True, null=True, verbose_name='Возможность вывода многоканального звука')),
                ('input_connectors', models.SmallIntegerField(blank=True, default=1, null=True, verbose_name='Входных разъемов jack 3.5 мм')),
                ('microphone_inputs', models.SmallIntegerField(blank=True, default=1, null=True, verbose_name='Микрофонных входов')),
                ('sound_middle_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sound_middle_conaction', to='shop_site.sound_card_category', verbose_name='Производитель')),
            ],
        ),
        migrations.CreateModel(
            name='SSD_drive_1_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ssd_1_name', models.CharField(max_length=100)),
                ('container', models.CharField(blank=True, max_length=100, null=True, verbose_name='Емкость')),
                ('the_form_factor', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Форм-фактор')),
                ('m2_connector', models.BooleanField(blank=True, default=False, null=True, verbose_name='Разъем M.2')),
                ('type_of_flash_memory', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип флэш-памяти')),
                ('reading_speed', models.CharField(blank=True, max_length=100, null=True, verbose_name='Скорость чтения')),
                ('recording_speed', models.CharField(blank=True, max_length=100, null=True, verbose_name='Скорость записи')),
                ('max_interface_speed', models.CharField(blank=True, max_length=100, null=True, verbose_name='Макс. скорость интерфейса')),
                ('price', models.PositiveSmallIntegerField(default=0)),
                ('images', models.ImageField(blank=True, null=True, upload_to='SSD_1_element_images/')),
                ('middle_ssd_drive_1_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='middle_ssd_1_conaction', to='shop_site.ssd_drive_1_category')),
            ],
        ),
        migrations.CreateModel(
            name='SSD_drive_2_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ssd_2_element_name', models.CharField(max_length=100)),
                ('container', models.CharField(blank=True, max_length=100, null=True, verbose_name='Емкость')),
                ('the_form_factor', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Форм-фактор')),
                ('m2_connector', models.BooleanField(blank=True, default=False, null=True, verbose_name='Разъем M.2')),
                ('type_of_flash_memory', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип флэш-памяти')),
                ('reading_speed', models.CharField(blank=True, max_length=100, null=True, verbose_name='Скорость чтения')),
                ('recording_speed', models.CharField(blank=True, max_length=100, null=True, verbose_name='Скорость записи')),
                ('max_interface_speed', models.CharField(blank=True, max_length=100, null=True, verbose_name='Макс. скорость интерфейса')),
                ('price', models.PositiveSmallIntegerField(default=0)),
                ('images', models.ImageField(blank=True, null=True, upload_to='ssd_2_element_images/')),
                ('middle_ssd_drive_2_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='middle_ssd_2_conaction', to='shop_site.ssd_drive_2_category')),
            ],
        ),
        migrations.CreateModel(
            name='The_headset_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('the_headset_element_name', models.CharField(max_length=100)),
                ('manufacturer', models.CharField(blank=True, max_length=100, null=True, verbose_name='Производитель')),
                ('type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип')),
                ('headphone_design', models.CharField(blank=True, max_length=100, null=True, verbose_name='Конструкция наушников')),
                ('connection_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип подключения')),
                ('type_of_acoustic_design', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип акустического оформления')),
                ('mounting_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип крепления')),
                ('cable_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип кабеля')),
                ('folding_design', models.BooleanField(blank=True, default=False, null=True, verbose_name='Складная конструкция')),
                ('connecting_the_cable', models.CharField(blank=True, max_length=100, null=True, verbose_name='Подключение кабеля')),
                ('interface_connection_connector', models.CharField(blank=True, max_length=100, null=True, verbose_name='Интерфейс/разъём подключения')),
                ('type_of_batteries', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип элементов питания')),
                ('battery_life', models.CharField(blank=True, max_length=100, null=True, verbose_name='Продолжительность работы от аккумуляторов')),
                ('type_of_wireless_connection', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип беспроводной связи')),
                ('range_of_action', models.CharField(blank=True, max_length=100, null=True, verbose_name='Радиус действия')),
                ('bluetooth_Version', models.CharField(blank=True, max_length=100, null=True, verbose_name='Версия Bluetooth')),
                ('case_case_included', models.BooleanField(blank=True, default=False, null=True, verbose_name='Чехол/футляр в комплекте')),
                ('volume_control', models.BooleanField(default=False, verbose_name='Регулятор громкости')),
                ('colour', models.CharField(blank=True, max_length=100, null=True, verbose_name='Цвет')),
                ('weight', models.CharField(blank=True, max_length=100, null=True, verbose_name='Вес')),
                ('guarantee', models.CharField(blank=True, max_length=100, null=True, verbose_name='Гарантия')),
                ('price', models.PositiveSmallIntegerField(default=0)),
                ('image', models.ImageField(upload_to='The_headset_element_images/')),
                ('middle_the_headset_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='middle_headset_conaction', to='shop_site.headset_category')),
            ],
        ),
        migrations.CreateModel(
            name='The_motherboard_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('motherboard_element_name', models.CharField(max_length=100, verbose_name='Name')),
                ('the_form_factor', models.CharField(blank=True, max_length=100, null=True, verbose_name='Форм-фактор')),
                ('number_of_lots', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Количество слотов памяти')),
                ('chipset', models.CharField(blank=True, max_length=100, null=True, verbose_name='Чипсет')),
                ('sound', models.CharField(blank=True, max_length=100, null=True, verbose_name='Звук')),
                ('socket', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='Socket')),
                ('slot_expansion', models.CharField(blank=True, max_length=100, null=True, verbose_name='Слоты расширения')),
                ('slot_type_m', models.CharField(blank=True, max_length=100, null=True, verbose_name='Тип слотов M.2')),
                ('price', models.PositiveSmallIntegerField(default=0)),
                ('motherboard_element_images', models.ImageField(blank=True, null=True, upload_to='motherboard_element_images/')),
                ('middle_the_motherboard_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='middle_the_motherboard_conaction', to='shop_site.the_motherboard_category')),
            ],
        ),
        migrations.CreateModel(
            name='Video_card_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_element_name', models.CharField(max_length=100)),
                ('graphics_processor', models.CharField(blank=True, max_length=100, null=True, verbose_name='Графический процессор')),
                ('recommended_power_supply_power_supply', models.CharField(blank=True, max_length=100, null=True, verbose_name='Рекомендуемая мощность блока питания')),
                ('technical_process', models.CharField(blank=True, max_length=100, null=True, verbose_name='Техпроцесс')),
                ('the_amount_of_video_memory', models.CharField(blank=True, max_length=100, null=True, verbose_name='Объем видеопамяти')),
                ('video_memory_bus_bit_rate', models.CharField(blank=True, max_length=100, null=True, verbose_name='Разрядность шины видеопамяти')),
                ('cuda_support', models.CharField(blank=True, max_length=100, null=True, verbose_name='Поддержка CUDA')),
                ('price', models.PositiveSmallIntegerField(default=0)),
                ('card_element_images', models.ImageField(blank=True, null=True, upload_to='card_element_images/')),
                ('middle_video_card_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='middle_video_card_conaction', to='shop_site.video_card_category')),
            ],
        ),
        migrations.CreateModel(
            name='MainComp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.body_category', verbose_name='корпус')),
                ('cooling', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.cooling_category', verbose_name='охлождения')),
                ('dvd_drive', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.dvd_drive_category', verbose_name='DVD привод')),
                ('hard_drive', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.hard_drive_category', verbose_name='жесткий диск')),
                ('headset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.headset_category', verbose_name='гарнитура')),
                ('keyboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.keyboard_category', verbose_name='клавиатура')),
                ('manitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.manitor_category', verbose_name='манитор')),
                ('mouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.mouse_catergory', verbose_name='мышь')),
                ('operating_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.operating_system_category', verbose_name='Операционнвя система')),
                ('power_unit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.power_unit_category', verbose_name='блок питания')),
                ('procecor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.processor_category', verbose_name='процессор')),
                ('memory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.random_access_memory_category', verbose_name='оперативнная памят')),
                ('sound_card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.sound_card_category', verbose_name='звуковая карта')),
                ('ssd_drive_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.ssd_drive_1_category', verbose_name='SSD диск 1')),
                ('ssd_drive_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.ssd_drive_2_category', verbose_name='SSD диск 2')),
                ('motherboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.the_motherboard_category', verbose_name='Материнская плата')),
                ('video_card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.video_card_category', verbose_name='видео карта')),
                ('wi_fi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop_site.wi_fi_category', verbose_name='wi-fi')),
            ],
        ),
        migrations.CreateModel(
            name='Wi_Fi_element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wi_fi_element_name', models.CharField(max_length=25, unique=True)),
                ('wi_fi_price', models.PositiveIntegerField(default=0, verbose_name='цена')),
                ('wi_fi_type', models.CharField(blank=True, max_length=25, null=True, verbose_name='тип')),
                ('wi_fi_wireless_communication', models.CharField(blank=True, max_length=25, null=True, verbose_name='Стандарт беспроводной связи')),
                ('wi_fi_number_antennas', models.IntegerField(blank=True, choices=[(0, '0'), (1, '1'), (2, '2'), (3, '3'), (4, '4')], null=True, verbose_name='Стандарт беспроводной связи')),
                ('information_protection', models.CharField(blank=True, max_length=25, null=True, verbose_name='Защита информации')),
                ('max_speed', models.CharField(blank=True, max_length=25, null=True, verbose_name='Макс. скорость беспроводного соединения')),
                ('wi_fi_img', models.ImageField(blank=True, null=True, upload_to='wi_fi_img')),
                ('wi_fi_middle_conaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wi_fi_middle_conaction', to='shop_site.wi_fi_category')),
            ],
        ),
    ]
